ОПИСАНИЕ АЛГОРИТМА ЗАПОЛНЕНИЯ С ЗАТРАВКОЙ ПО ОТРЕЗКАМ
=======================================================

1. ОБЩЕЕ ОПИСАНИЕ АЛГОРИТМА
---------------------------

Реализован алгоритм заполнения многоугольника с затравкой по отрезкам (Seed Fill by Lines).
Это оптимизированная версия алгоритма заполнения, которая заполняет область не по отдельным 
пикселям, а целыми горизонтальными отрезками, что значительно повышает эффективность.

Основная идея:
- Начинаем с точки затравки внутри многоугольника
- Заполняем горизонтальные отрезки слева направо
- Для каждого отрезка проверяем соседние строки выше и ниже
- Добавляем новые точки затравки в стек для обработки


2. СТРУКТУРА ДАННЫХ
-------------------

- polygon: список координат вершин многоугольника [(x1,y1), (x2,y2), ...]
- seed_point: начальная точка затравки (x, y) внутри многоугольника  
- grid: двумерная булевская матрица для отслеживания заполненных пикселей
- stack: стек точек для обработки (алгоритм в глубину)
- filled_pixels: список всех заполненных пикселей для визуализации


3. ПОШАГОВАЯ РАБОТА АЛГОРИТМА
------------------------------

ШАГ 1: ИНИЦИАЛИЗАЦИЯ
- Определяем ограничивающий прямоугольник многоугольника (min_x, max_x, min_y, max_y)
- Создаем сетку grid размером (height × width) для отслеживания заполненных пикселей
- Помещаем точку затравки в стек для обработки

ШАГ 2: ОСНОВНОЙ ЦИКЛ (пока стек не пуст)
- Извлекаем точку (x, y) из стека
- Проверяем границы области и состояние пикселя
- Если точка уже заполнена или находится вне многоугольника - пропускаем

ШАГ 3: ЗАПОЛНЕНИЕ ГОРИЗОНТАЛЬНОГО ОТРЕЗКА
- Отмечаем текущую точку как заполненную
- Ищем ЛЕВУЮ границу отрезка:
  * Двигаемся влево от текущей точки
  * Пока точка находится внутри многоугольника - заполняем пиксель
  * Запоминаем крайнюю левую позицию
  
- Ищем ПРАВУЮ границу отрезка:
  * Двигаемся вправо от текущей точки  
  * Пока точка находится внутри многоугольника - заполняем пиксель
  * Запоминаем крайнюю правую позицию

ШАГ 4: ПОИСК НОВЫХ ТОЧЕК ЗАТРАВКИ
- Проверяем строку ВЫШЕ (y + 1):
  * Сканируем весь заполненный отрезок [left, right]
  * Для каждой точки проверяем: внутри ли многоугольника и не заполнена ли
  * Если условия выполнены - добавляем в стек
  
- Проверяем строку НИЖЕ (y - 1):
  * Аналогично сканируем отрезок [left, right]
  * Добавляем подходящие точки в стек

ШАГ 5: ВИЗУАЛИЗАЦИЯ (через yield)
- После каждой итерации возвращаем текущее состояние filled_pixels
- Это позволяет создать пошаговую анимацию заполнения


4. КЛЮЧЕВЫЕ ФУНКЦИИ
-------------------

point_in_polygon(x, y):
- Определяет, находится ли точка внутри многоугольника
- Использует алгоритм "Ray Casting" (трассировка луча)
- Подсчитывает пересечения горизонтального луча с ребрами многоугольника
- Нечетное количество пересечений = точка внутри

Проверка границ:
- Контролирует выход за пределы ограничивающего прямоугольника
- Предотвращает повторное заполнение уже обработанных пикселей


5. ПРЕИМУЩЕСТВА АЛГОРИТМА
--------------------------

✓ ЭФФЕКТИВНОСТЬ: заполнение по отрезкам быстрее чем по отдельным пикселям
✓ ПАМЯТЬ: использует стек вместо рекурсии, избегает переполнения стека
✓ ВИЗУАЛИЗАЦИЯ: генератор позволяет показать процесс заполнения пошагово
✓ УНИВЕРСАЛЬНОСТЬ: работает с любыми выпуклыми и невыпуклыми многоугольниками


6. ПАРАМЕТРЫ ПРОГРАММЫ
----------------------

Многоугольник: 12 вершин, сложная форма с вогнутостями
Точка затравки: (60, 220) - внутри многоугольника
Область: примерно от (-5, 0) до (400, 350)
Анимация: 10ms между кадрами, без повторения


7. РЕЗУЛЬТАТ РАБОТЫ
-------------------

Программа создает интерактивную анимацию, показывающую:
- Исходный многоугольник (синяя граница)
- Точку затравки (красная точка)
- Пошаговое заполнение области (зеленые пиксели)
- Процесс распространения заполнения от затравки к границам

Алгоритм корректно заполняет всю внутреннюю область многоугольника,
не выходя за его границы.
