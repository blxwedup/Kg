ОТВЕТЫ НА ВОПРОСЫ ПО АЛГОРИТМАМ БРЕЗЕНХЕМА
==================================================

ОТРЕЗОК (Алгоритм Брезенхема для отрезка)
==========================================

1. Какие преобразования нужно осуществить перед построением отрезка?

Перед построением отрезка необходимо выполнить следующие преобразования:

а) Вычисление приращений по осям:
   - dx = abs(x1 - x0) - абсолютное значение приращения по оси X
   - dy = abs(y1 - y0) - абсолютное значение приращения по оси Y

б) Определение направления движения:
   - sx = 1 если x0 < x1, иначе -1 (направление по X)
   - sy = 1 если y0 < y1, иначе -1 (направление по Y)

в) Инициализация начальной ошибки:
   - err = dx - dy (начальное значение ошибки)

Эти преобразования позволяют алгоритму работать для отрезков в любом направлении 
и с любым наклоном, приводя задачу к универсальному виду.

2. Что такое ошибка? Какой у нее геометрический смысл? Как она пересчитывается и почему так?

ОШИБКА (error) - это накопленное отклонение между идеальной (вещественной) прямой 
и выбранными целочисленными пикселями.

ГЕОМЕТРИЧЕСКИЙ СМЫСЛ:
Ошибка отражает, насколько выбранный пиксель "отстоит" от истинной линии. 
Если ошибка становится достаточно большой, значит текущий выбор пикселя слишком 
далёк от идеальной линии и требуется корректировка (смещение по другой оси).

ПЕРЕСЧЕТ ОШИБКИ:
- e2 = 2 * err (удвоенная ошибка для избежания дробных вычислений)
- Если e2 >= -dy: err -= dy, x0 += sx (движение по X)
- Если e2 <= dx: err += dx, y0 += sy (движение по Y)

ПОЧЕМУ ТАК:
Формулы основаны на анализе уравнения прямой y = kx + b. Ошибка показывает, 
на какой стороне от идеальной прямой находится текущий пиксель. Когда ошибка 
превышает определенный порог, алгоритм "корректирует" траекторию, выбирая 
пиксель ближе к идеальной линии.

3. Как получилось, что вычисления происходят в целых числах?

Алгоритм Брезенхема специально разработан для работы только с целыми числами:

а) Использование удвоенных значений: 2*err вместо err позволяет избежать деления на 2
б) Сравнения производятся с целыми пороговыми значениями (-dy и dx)
в) Все операции - это сложение, вычитание и сравнение целых чисел
г) Начальные координаты и приращения - целые числа

Это достигается математическими преобразованиями исходного уравнения прямой, 
где все дробные коэффициенты умножаются на подходящие константы для получения 
целочисленных эквивалентов.

ОКРУЖНОСТЬ (Алгоритм Брезенхема для окружности)
===============================================

1. На сколько частей делится окружность для построения? Какая именно из этих частей строится?

Окружность делится на 8 РАВНЫХ ЧАСТЕЙ (октантов).

Алгоритм строит только ОДНУ ВОСЬМУЮ часть окружности - первый октант 
(от 0° до 45°, где x изменяется от 0 до r/√2, а y от r до r/√2).

Остальные 7 частей получаются путем СИММЕТРИЧНОГО ОТРАЖЕНИЯ построенных точек:
- Относительно осей X и Y
- Относительно диагоналей y = x и y = -x

В коде это реализовано через добавление 8 симметричных точек на каждой итерации:
(cx±x, cy±y), (cx±y, cy±x)

2. Что такое ошибка? Какой у нее геометрический смысл? Как она пересчитывается и почему так?

ОШИБКА (d) - величина, которая определяет, насколько точка, выбранная на шаге, 
отклоняется от идеальной окружности.

ГЕОМЕТРИЧЕСКИЙ СМЫСЛ:
Ошибка показывает, с какой стороны от окружности находится средняя точка между 
двумя возможными пикселями-кандидатами. Если d < 0, то средняя точка находится 
внутри окружности, если d > 0 - снаружи.

ПЕРЕСЧЕТ ОШИБКИ:
- Начальное значение: d = 3 - 2*r
- Если d < 0: d += 4*x + 6 (движемся только по X)
- Если d >= 0: d += 4*(x-y) + 10, y -= 1 (движемся по X и Y)

ПОЧЕМУ ТАК:
Формулы получены из анализа разности между значением функции окружности 
x² + y² = r² и значением в середине между двумя возможными пиксельными координатами.

Алгоритм использует решающую функцию F(x,y) = x² + y² - r².
Для точек на окружности F = 0, внутри F < 0, снаружи F > 0.

Пересчет ошибки основан на разности значений этой функции при переходе к 
следующему пикселю, что позволяет избежать вычисления квадратов и корней, 
используя только сложение и умножение.

ОБЩИЕ ПРЕИМУЩЕСТВА АЛГОРИТМОВ БРЕЗЕНХЕМА:
=========================================
1. Только целочисленная арифметика
2. Высокая скорость выполнения
3. Минимальное количество операций на пиксель
4. Отсутствие операций деления и умножения в основном цикле
5. Равномерное распределение пикселей без пропусков и наложений
